{"ast":null,"code":"import _regeneratorRuntime from\"/Users/angelyang/Desktop/realchatapp/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _asyncToGenerator from\"/Users/angelyang/Desktop/realchatapp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _objectSpread from\"/Users/angelyang/Desktop/realchatapp/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _slicedToArray from\"/Users/angelyang/Desktop/realchatapp/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import{useEffect,useState}from\"react\";//firestore imports\nimport{addDoc,collection,serverTimestamp,onSnapshot,query,where,orderBy}from'firebase/firestore';import{auth,database}from\"../firebase-config\";//import style\nimport\"../styles/chat.css\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";export var Chat=function Chat(props){//stores the room the user created in App.js\nvar room=props.room;var name=props.userChatName;//make a reference to the collection we want to add docs to\nvar messagesColl=collection(database,\"messages\");//state to keep track of what the user is typing in the input\nvar _useState=useState(\"\"),_useState2=_slicedToArray(_useState,2),message=_useState2[0],setMessage=_useState2[1];//state to display ALL messages inside a room as an ARRAY\nvar _useState3=useState([]),_useState4=_slicedToArray(_useState3,2),allMessages=_useState4[0],setAllMessages=_useState4[1];//allows us to fetch all the data and display it in the chatroom\nuseEffect(function(){//query allows you to filter out the data in your collection \n//where allows you to identify docs that meet your criteria\n//we only want to fetch data/messages from the SAME ROOM \n//messages are ordered in ascending order\nvar messagesQuery=query(messagesColl,where(\"room\",\"==\",room),orderBy(\"createdAt\"));//allows us to listen for changes to the collection\nvar unsubscribe=onSnapshot(messagesQuery,function(snapshot){//declare empty array\nvar updatedMessages=[];//grab every element in the snapshot  + add each doc\n//as an object to the array \"updatedMessages\" \nsnapshot.forEach(function(doc){//add all of the data from doc & create a new field called \n//\"id\" and store the doc.id as its value\nupdatedMessages.push(_objectSpread(_objectSpread({},doc.data()),{},{id:doc.id}));});//update the message stream \nsetAllMessages(updatedMessages);});//clean up our useEffect\nreturn function(){return unsubscribe();};},[]);//submit form event handler\nvar handleSubmit=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(e){return _regeneratorRuntime().wrap(function _callee$(_context){while(1)switch(_context.prev=_context.next){case 0://prevents the page from reloading\ne.preventDefault();//test message in the console\nconsole.log(message);//if the message is empty, return nothing (DON'T ADD TO DATABASE)\nif(!(message===\"\")){_context.next=4;break;}return _context.abrupt(\"return\");case 4:_context.next=6;return addDoc(messagesColl,{text:message,//serverTimestamp returns the time the message was sent\ncreatedAt:serverTimestamp(),name:name+\" meow\",room:room});case 6://clear message after adding new doc\nsetMessage(\"\");case 7:case\"end\":return _context.stop();}},_callee);}));return function handleSubmit(_x){return _ref.apply(this,arguments);};}();return/*#__PURE__*/_jsxs(\"div\",{className:\"chat-app\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"header\",children:/*#__PURE__*/_jsxs(\"h1\",{children:[\" Welcome to: \",room,\" \"]})}),/*#__PURE__*/_jsxs(\"div\",{className:\"messages\",children:[allMessages.map(function(m){return/*#__PURE__*/_jsxs(\"div\",{className:\"message\",children:[/*#__PURE__*/_jsxs(\"span\",{className:\"user\",children:[\" \",m.name,\" \"]}),m.text]},m.id);}),\" \"]}),/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleSubmit,className:\"new-message-form\",children:[/*#__PURE__*/_jsx(\"input\",{className:\"new-message-input\",placeholder:\"type something...\",onChange:function onChange(e){return setMessage(e.target.value);},value:message}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",className:\"send-button\",children:\" Send \"})]})]});};","map":{"version":3,"names":["useEffect","useState","addDoc","collection","serverTimestamp","onSnapshot","query","where","orderBy","auth","database","jsxs","_jsxs","jsx","_jsx","Chat","props","room","name","userChatName","messagesColl","_useState","_useState2","_slicedToArray","message","setMessage","_useState3","_useState4","allMessages","setAllMessages","messagesQuery","unsubscribe","snapshot","updatedMessages","forEach","doc","push","_objectSpread","data","id","handleSubmit","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","e","wrap","_callee$","_context","prev","next","preventDefault","console","log","abrupt","text","createdAt","stop","_x","apply","arguments","className","children","map","m","onSubmit","placeholder","onChange","target","value","type"],"sources":["/Users/angelyang/Desktop/realchatapp/src/components/chat.js"],"sourcesContent":["import {useEffect, useState} from \"react\"\n//firestore imports\nimport {addDoc, collection, serverTimestamp, onSnapshot, query, where, orderBy} from 'firebase/firestore'\nimport { auth, database } from \"../firebase-config\";\n\n//import style\nimport \"../styles/chat.css\"\n\nexport const Chat = (props) => {\n\n    //stores the room the user created in App.js\n    const room = props.room;\n\n    const name = props.userChatName;\n\n    //make a reference to the collection we want to add docs to\n    const messagesColl = collection(database, \"messages\");\n\n    //state to keep track of what the user is typing in the input\n    const [message, setMessage] = useState(\"\");\n\n    //state to display ALL messages inside a room as an ARRAY\n    const [allMessages, setAllMessages] = useState([]);\n\n    //allows us to fetch all the data and display it in the chatroom\n    useEffect(() => {\n        //query allows you to filter out the data in your collection \n        //where allows you to identify docs that meet your criteria\n        //we only want to fetch data/messages from the SAME ROOM \n        //messages are ordered in ascending order\n        const messagesQuery = query(messagesColl, \n            where(\"room\", \"==\", room), orderBy(\"createdAt\"));\n\n        //allows us to listen for changes to the collection\n        const unsubscribe = onSnapshot(messagesQuery, (snapshot) => {\n        //declare empty array\n        let updatedMessages = [];\n\n        //grab every element in the snapshot  + add each doc\n        //as an object to the array \"updatedMessages\" \n        snapshot.forEach((doc) => {\n            //add all of the data from doc & create a new field called \n            //\"id\" and store the doc.id as its value\n            updatedMessages.push({...doc.data(), id : doc.id});\n            });\n        \n        //update the message stream \n        setAllMessages(updatedMessages);\n        });\n\n        //clean up our useEffect\n        return () => unsubscribe();\n\n    }, []);\n\n    //submit form event handler\n    const handleSubmit = async (e) => {\n        //prevents the page from reloading\n        e.preventDefault()\n\n        //test message in the console\n        console.log(message);\n\n        //if the message is empty, return nothing (DON'T ADD TO DATABASE)\n        if (message === \"\") {\n            return;\n        }\n\n        //add doc/message to your collection with 2 arguments:\n        //(1) reference to your collection\n        //(2) the object to add as your doc {attr1: something, attr2: something...}\n        await addDoc(messagesColl, {\n            text: message,\n            //serverTimestamp returns the time the message was sent\n            createdAt: serverTimestamp(),\n            name: name + \" meow\",\n            room: room,\n        });\n\n        //clear message after adding new doc\n        setMessage(\"\");\n\n    }\n\n    return (\n\n        <div className=\"chat-app\"> \n\n        <div className=\"header\"> \n        <h1> Welcome to: {room} </h1>\n        </div>\n\n        <div className=\"messages\"> \n        \n        {allMessages.map((m) => \n            <div className=\"message\" key={m.id}> \n                <span className=\"user\"> {m.name} </span>\n                {m.text}\n            </div> \n\n        )} </div>\n        \n        <form onSubmit={handleSubmit} className=\"new-message-form\">\n\n            {/** onChange will continue to update the \"message\" state with the input text */}\n            {/** set value to message so that when message cleared so does the input */}\n            <input className=\"new-message-input\" placeholder=\"type something...\" onChange={(e) => setMessage(e.target.value)} value={message}/>\n\n            {/** button must be of type \"submit\" for it to submit the form */}\n            <button type=\"submit\" className=\"send-button\"> Send </button>\n    \n        </form>\n       \n        </div>\n    )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}