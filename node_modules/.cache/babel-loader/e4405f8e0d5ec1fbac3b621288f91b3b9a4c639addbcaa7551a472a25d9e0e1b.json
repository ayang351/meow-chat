{"ast":null,"code":"var _jsxFileName = \"/Users/angelyang/Desktop/chatapp/src/components/chat.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\n//firestore imports\nimport { addDoc, collection, serverTimestamp, onSnapshot, query, where, orderBy } from 'firebase/firestore';\nimport { auth, database } from \"../firebase-config\";\n\n//import style\nimport \"../styles/chat.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Chat = currentRoom => {\n  _s();\n  //stores the room the user created in App.js\n  const {\n    room\n  } = currentRoom;\n\n  //make a reference to the collection we want to add docs to\n  const messagesColl = collection(database, \"messages\");\n\n  //state to keep track of what the user is typing in the input\n  const [message, setMessage] = useState(\"\");\n\n  //state to display ALL messages inside a room as an ARRAY\n  const [allMessages, setAllMessages] = useState([]);\n\n  //allows us to fetch all the data and display it in the chatroom\n  useEffect(() => {\n    //query allows you to filter out the data in your collection \n    //where allows you to identify docs that meet your criteria\n    //we only want to fetch data/messages from the SAME ROOM \n    //messages are ordered in ascending order\n    const messagesQuery = query(messagesColl, where(\"room\", \"==\", room), orderBy(\"createdAt\"));\n\n    //allows us to listen for changes to the collection\n    const unsubscribe = onSnapshot(messagesQuery, snapshot => {\n      //declare empty array\n      let updatedMessages = [];\n\n      //grab every element in the snapshot  + add each doc\n      //as an object to the array \"updatedMessages\" \n      snapshot.forEach(doc => {\n        //add all of the data from doc & create a new field called \n        //\"id\" and store the doc.id as its value\n        updatedMessages.push({\n          ...doc.data(),\n          id: doc.id\n        });\n      });\n\n      //update the message stream \n      setAllMessages(updatedMessages);\n    });\n\n    //clean up our useEffect\n    return () => unsubscribe();\n  }, []);\n\n  //submit form event handler\n  const handleSubmit = async e => {\n    //prevents the page from reloading\n    e.preventDefault();\n\n    //test message in the console\n    console.log(message);\n\n    //if the message is empty, return nothing (DON'T ADD TO DATABASE)\n    if (message === \"\") {\n      return;\n    }\n\n    //add doc/message to your collection with 2 arguments:\n    //(1) reference to your collection\n    //(2) the object to add as your doc {attr1: something, attr2: something...}\n    await addDoc(messagesColl, {\n      text: message,\n      //serverTimestamp returns the time the message was sent\n      createdAt: serverTimestamp(),\n      user: auth.currentUser.displayName + \" meow\",\n      room: room\n    });\n\n    //clear message after adding new doc\n    setMessage(\"\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-app\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\" Welcome to: \", room, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages\",\n      children: [allMessages.map(m => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"user\",\n          children: [\" \", m.user, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 17\n        }, this), m.text]\n      }, m.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 13\n      }, this)), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      className: \"new-message-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"new-message-input\",\n        placeholder: \"type something...\",\n        onChange: e => setMessage(e.target.value),\n        value: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"send-button\",\n        children: \" Send \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 9\n  }, this);\n};\n_s(Chat, \"r8BJGpIk36QmxXcLS43DS0OJjC0=\");\n_c = Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["useEffect","useState","addDoc","collection","serverTimestamp","onSnapshot","query","where","orderBy","auth","database","jsxDEV","_jsxDEV","Chat","currentRoom","_s","room","messagesColl","message","setMessage","allMessages","setAllMessages","messagesQuery","unsubscribe","snapshot","updatedMessages","forEach","doc","push","data","id","handleSubmit","e","preventDefault","console","log","text","createdAt","user","currentUser","displayName","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","m","onSubmit","placeholder","onChange","target","value","type","_c","$RefreshReg$"],"sources":["/Users/angelyang/Desktop/chatapp/src/components/chat.js"],"sourcesContent":["import {useEffect, useState} from \"react\"\n//firestore imports\nimport {addDoc, collection, serverTimestamp, onSnapshot, query, where, orderBy} from 'firebase/firestore'\nimport { auth, database } from \"../firebase-config\";\n\n//import style\nimport \"../styles/chat.css\"\n\nexport const Chat = (currentRoom) => {\n\n    //stores the room the user created in App.js\n    const {room} = currentRoom;\n\n    //make a reference to the collection we want to add docs to\n    const messagesColl = collection(database, \"messages\");\n\n    //state to keep track of what the user is typing in the input\n    const [message, setMessage] = useState(\"\");\n\n    //state to display ALL messages inside a room as an ARRAY\n    const [allMessages, setAllMessages] = useState([]);\n\n    //allows us to fetch all the data and display it in the chatroom\n    useEffect(() => {\n        //query allows you to filter out the data in your collection \n        //where allows you to identify docs that meet your criteria\n        //we only want to fetch data/messages from the SAME ROOM \n        //messages are ordered in ascending order\n        const messagesQuery = query(messagesColl, \n            where(\"room\", \"==\", room), orderBy(\"createdAt\"));\n\n        //allows us to listen for changes to the collection\n        const unsubscribe = onSnapshot(messagesQuery, (snapshot) => {\n        //declare empty array\n        let updatedMessages = [];\n\n        //grab every element in the snapshot  + add each doc\n        //as an object to the array \"updatedMessages\" \n        snapshot.forEach((doc) => {\n            //add all of the data from doc & create a new field called \n            //\"id\" and store the doc.id as its value\n            updatedMessages.push({...doc.data(), id : doc.id});\n            });\n        \n        //update the message stream \n        setAllMessages(updatedMessages);\n        });\n\n        //clean up our useEffect\n        return () => unsubscribe();\n\n    }, []);\n\n    //submit form event handler\n    const handleSubmit = async (e) => {\n        //prevents the page from reloading\n        e.preventDefault()\n\n        //test message in the console\n        console.log(message);\n\n        //if the message is empty, return nothing (DON'T ADD TO DATABASE)\n        if (message === \"\") {\n            return;\n        }\n\n        //add doc/message to your collection with 2 arguments:\n        //(1) reference to your collection\n        //(2) the object to add as your doc {attr1: something, attr2: something...}\n        await addDoc(messagesColl, {\n            text: message,\n            //serverTimestamp returns the time the message was sent\n            createdAt: serverTimestamp(),\n            user: auth.currentUser.displayName + \" meow\",\n            room: room,\n        });\n\n        //clear message after adding new doc\n        setMessage(\"\");\n    }\n\n    return (\n        <div className=\"chat-app\"> \n\n        <div className=\"header\"> \n        <h1> Welcome to: {room} </h1>\n        </div>\n\n        <div className=\"messages\"> \n        \n        {allMessages.map((m) => \n            <div className=\"message\" key={m.id}> \n                <span className=\"user\"> {m.user} </span>\n                {m.text}\n            </div> \n\n        )} </div>\n        \n        <form onSubmit={handleSubmit} className=\"new-message-form\">\n\n            {/** onChange will continue to update the \"message\" state with the input text */}\n            {/** set value to message so that when message cleared so does the input */}\n            <input className=\"new-message-input\" placeholder=\"type something...\" onChange={(e) => setMessage(e.target.value)} value={message}/>\n\n            {/** button must be of type \"submit\" for it to submit the form */}\n            <button type=\"submit\" className=\"send-button\"> Send </button>\n    \n        </form>\n       \n        </div>\n    )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}