{"ast":null,"code":"var _jsxFileName = \"/Users/angelyang/Desktop/chatapp/src/App.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport './App.css';\nimport { Auth } from './components/Auth';\n//imports for our cookies\nimport Cookies from 'universal-cookie';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst cookies = new Cookies();\nfunction App() {\n  _s();\n  //will constantly check T/F whether the user is authenticated or not when app is running\n  //must check the refresh token that was stored inside Auth.js using the cookies's getter under the name \"auth-token\"\n  //initial authentication value will be set to the auth-token; null if never authenticated\n  const [isAuth, setIsAuth] = useState(cookies.get(\"auth-token\"));\n  const [room, setRoom] = useState(null);\n\n  //if the user is not authenticated, show them the login page.\n  //Else, navigate to the chat room\n  if (!isAuth) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(Auth, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this);\n  }\n\n  //if user is authenticated...\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: room ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \" Chat \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 14\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"room\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \" Enter Room Name: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \" Enter Chat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 6\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 3\n  }, this);\n}\n_s(App, \"hJci4weuHnIP6DxyBZubBF7bnHc=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","Auth","Cookies","jsxDEV","_jsxDEV","cookies","App","_s","isAuth","setIsAuth","get","room","setRoom","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/angelyang/Desktop/chatapp/src/App.js"],"sourcesContent":["import { useState } from 'react';\nimport './App.css';\nimport {Auth} from './components/Auth'\n//imports for our cookies\nimport Cookies from 'universal-cookie';\nconst cookies = new Cookies();\n\nfunction App() {\n\n  //will constantly check T/F whether the user is authenticated or not when app is running\n  //must check the refresh token that was stored inside Auth.js using the cookies's getter under the name \"auth-token\"\n  //initial authentication value will be set to the auth-token; null if never authenticated\n  const [isAuth, setIsAuth] = useState(cookies.get(\"auth-token\"));\n\n  const [room, setRoom] = useState(null);\n\n\n  //if the user is not authenticated, show them the login page.\n  //Else, navigate to the chat room\n  if (!isAuth) {\n\n    return (\n      <div className=\"App\">\n        {/** NAVIGATE TO LOGIN PAGE */}\n        <Auth />\n      </div>\n    );\n  } \n\n  //if user is authenticated...\n  return (\n  <div> \n    {room ? (<div> Chat </div>) : \n    (<div className=\"room\"> \n    <label> Enter Room Name: </label>\n    <input />\n    <button> Enter Chat</button>\n    </div>)}\n  \n  </div>\n  \n  );\n\n \n  \n}\n\nexport default App;\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAO,WAAW;AAClB,SAAQC,IAAI,QAAO,mBAAmB;AACtC;AACA,OAAOC,OAAO,MAAM,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AACvC,MAAMC,OAAO,GAAG,IAAIH,OAAO,CAAC,CAAC;AAE7B,SAASI,GAAGA,CAAA,EAAG;EAAAC,EAAA;EAEb;EACA;EACA;EACA,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGT,QAAQ,CAACK,OAAO,CAACK,GAAG,CAAC,YAAY,CAAC,CAAC;EAE/D,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;;EAGtC;EACA;EACA,IAAI,CAACQ,MAAM,EAAE;IAEX,oBACEJ,OAAA;MAAKS,SAAS,EAAC,KAAK;MAAAC,QAAA,eAElBV,OAAA,CAACH,IAAI;QAAAc,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC;EAEV;;EAEA;EACA,oBACAd,OAAA;IAAAU,QAAA,EACGH,IAAI,gBAAIP,OAAA;MAAAU,QAAA,EAAK;IAAM;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,gBACzBd,OAAA;MAAKS,SAAS,EAAC,MAAM;MAAAC,QAAA,gBACtBV,OAAA;QAAAU,QAAA,EAAO;MAAkB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,eACjCd,OAAA;QAAAW,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACTd,OAAA;QAAAU,QAAA,EAAQ;MAAW;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACvB;EAAE;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEJ,CAAC;AAMR;AAACX,EAAA,CAtCQD,GAAG;AAAAa,EAAA,GAAHb,GAAG;AAwCZ,eAAeA,GAAG;AAAC,IAAAa,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}