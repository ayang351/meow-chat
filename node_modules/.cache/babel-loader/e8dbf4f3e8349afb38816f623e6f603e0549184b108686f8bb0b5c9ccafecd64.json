{"ast":null,"code":"var _jsxFileName = \"/Users/angelyang/Desktop/chatapp/src/components/Auth.js\";\n//import firebase config variables created in firebase-config file\nimport { auth, provider } from \"../firebase-config.js\";\n\n//import relevant built-in function from firebase\nimport { signInWithPopup, createUserWithEmailAndPassword } from \"firebase/auth\";\nimport { useRef } from \"react\";\n\n//import Cookies from the universal cookie library\nimport Cookies from 'universal-cookie';\n\n//create a reference for your cookie\n//can get(), set(), remove() cookies in the browser\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst cookies = new Cookies();\nexport const Auth = authState => {\n  const {\n    setisAuth\n  } = authState;\n\n  //function that returns a promise to allow users to sign in with a pop-up\n  //provided 2 arguments: (1) the authentication info (2) the provider from firebase-config.js\n  const signInWithGoogle = async () => {\n    try {\n      //will return an object with email, displayname, profile pic\n      const result = await signInWithPopup(auth, provider);\n\n      //set up cookies upon sign-in\n      //we want the refresh token to be stored in our cookie under the name \"auth-token\"\n      cookies.set(\"auth-token\", result.user.refreshToken);\n\n      //set authentication to true\n      setisAuth(true);\n    } catch (err) {\n      console.log(err);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"auth\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: \" \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \" Sign In with Google \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: signInWithGoogle,\n      children: \" Sign in With Google \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 9\n  }, this);\n};\n_c = Auth;\nvar _c;\n$RefreshReg$(_c, \"Auth\");","map":{"version":3,"names":["auth","provider","signInWithPopup","createUserWithEmailAndPassword","useRef","Cookies","jsxDEV","_jsxDEV","cookies","Auth","authState","setisAuth","signInWithGoogle","result","set","user","refreshToken","err","console","log","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/angelyang/Desktop/chatapp/src/components/Auth.js"],"sourcesContent":["//import firebase config variables created in firebase-config file\nimport {auth, provider} from \"../firebase-config.js\"\n\n//import relevant built-in function from firebase\nimport {signInWithPopup, createUserWithEmailAndPassword} from \"firebase/auth\"\nimport { useRef } from \"react\";\n\n//import Cookies from the universal cookie library\nimport Cookies from 'universal-cookie'\n\n\n//create a reference for your cookie\n//can get(), set(), remove() cookies in the browser\nconst cookies = new Cookies();\n\n\nexport const Auth = (authState) => {\n    \n    const { setisAuth } = authState; \n\n\n\n    //function that returns a promise to allow users to sign in with a pop-up\n    //provided 2 arguments: (1) the authentication info (2) the provider from firebase-config.js\n    const signInWithGoogle = async () => {\n        \n        try {\n             //will return an object with email, displayname, profile pic\n            const result = await signInWithPopup(auth, provider);\n\n            //set up cookies upon sign-in\n            //we want the refresh token to be stored in our cookie under the name \"auth-token\"\n            cookies.set(\"auth-token\", result.user.refreshToken);\n\n            //set authentication to true\n            setisAuth(true);\n\n        } catch (err) {\n            console.log(err);\n        }\n    }\n    \n    return (\n        <div className=\"auth\">\n            <p> </p>\n            <p> Sign In with Google </p>\n            <button onClick={signInWithGoogle}> Sign in With Google </button>\n        </div>\n    );\n}"],"mappings":";AAAA;AACA,SAAQA,IAAI,EAAEC,QAAQ,QAAO,uBAAuB;;AAEpD;AACA,SAAQC,eAAe,EAAEC,8BAA8B,QAAO,eAAe;AAC7E,SAASC,MAAM,QAAQ,OAAO;;AAE9B;AACA,OAAOC,OAAO,MAAM,kBAAkB;;AAGtC;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,OAAO,GAAG,IAAIH,OAAO,CAAC,CAAC;AAG7B,OAAO,MAAMI,IAAI,GAAIC,SAAS,IAAK;EAE/B,MAAM;IAAEC;EAAU,CAAC,GAAGD,SAAS;;EAI/B;EACA;EACA,MAAME,gBAAgB,GAAG,MAAAA,CAAA,KAAY;IAEjC,IAAI;MACC;MACD,MAAMC,MAAM,GAAG,MAAMX,eAAe,CAACF,IAAI,EAAEC,QAAQ,CAAC;;MAEpD;MACA;MACAO,OAAO,CAACM,GAAG,CAAC,YAAY,EAAED,MAAM,CAACE,IAAI,CAACC,YAAY,CAAC;;MAEnD;MACAL,SAAS,CAAC,IAAI,CAAC;IAEnB,CAAC,CAAC,OAAOM,GAAG,EAAE;MACVC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;IACpB;EACJ,CAAC;EAED,oBACIV,OAAA;IAAKa,SAAS,EAAC,MAAM;IAAAC,QAAA,gBACjBd,OAAA;MAAAc,QAAA,EAAG;IAAC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,eACRlB,OAAA;MAAAc,QAAA,EAAG;IAAqB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,eAC5BlB,OAAA;MAAQmB,OAAO,EAAEd,gBAAiB;MAAAS,QAAA,EAAC;IAAqB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAChE,CAAC;AAEd,CAAC;AAAAE,EAAA,GAjCYlB,IAAI;AAAA,IAAAkB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}