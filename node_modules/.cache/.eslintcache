[{"/Users/angelyang/Desktop/realchatapp/src/index.js":"1","/Users/angelyang/Desktop/realchatapp/src/App.js":"2","/Users/angelyang/Desktop/realchatapp/src/firebase-config.js":"3","/Users/angelyang/Desktop/realchatapp/src/components/Auth.js":"4","/Users/angelyang/Desktop/realchatapp/src/components/chat.js":"5"},{"size":253,"mtime":1688783976007,"results":"6","hashOfConfig":"7"},{"size":3180,"mtime":1690491136415,"results":"8","hashOfConfig":"7"},{"size":986,"mtime":1689091529940,"results":"9","hashOfConfig":"7"},{"size":1567,"mtime":1690492067252,"results":"10","hashOfConfig":"7"},{"size":3827,"mtime":1688784872121,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"co9fgu",{"filePath":"15","messages":"16","suppressedMessages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},"/Users/angelyang/Desktop/realchatapp/src/index.js",[],[],"/Users/angelyang/Desktop/realchatapp/src/App.js",["30"],[],"import { useState, useRef} from 'react';\n// import './index.css';\nimport {Auth} from './components/Auth'\n//imports for our cookies\nimport Cookies from 'universal-cookie';\nimport { Chat } from './components/chat';\nimport {signOut} from \"firebase/auth\"\nimport {auth} from './firebase-config'\nimport './App.css';\nimport catImage from './images/catimg.png';\n\nconst cookies = new Cookies();\n\nfunction App() {\n\n  //will constantly check T/F whether the user is authenticated or not when app is running\n  //must check the refresh token that was stored inside Auth.js using the cookies's getter under the name \"auth-token\"\n  //initial authentication value will be set to the auth-token; null if never authenticated\n  const [isAuth, setIsAuth] = useState(cookies.get(\"auth-token\"));\n\n  //state that keeps track of our chatroom\n  const [room, setRoom] = useState(null);\n\n  //state that keeps track of user chat name\n  const [userChatName, setUserChatName] = useState(\"\");\n\n  //used to hold a reference to the user input\n  const roomInputRef = useRef(null);\n\n  const chatNameRef = useRef(null);\n\n  //function to sign user out of their google account\n  const signUserOut =  async () => {\n    await signOut(auth);\n    //remove the cookies from the browser with login info\n    cookies.remove(\"auth-token\");\n    //set authentication back to false\n    setIsAuth(false);\n    //disable the room to null\n    setRoom(null);\n  }\n\n  // updates the states for both room name and user's chat name\n  const setRoomAndName = (roomName, chatName) => {\n    setRoom(roomName);\n    setUserChatName(chatName);\n  }\n\n\n  //if the user is not authenticated, show them the login page.\n  //Else, navigate to the chat room\n  if (!isAuth) {\n\n    return (\n      <div className=\"App\">\n        <div className=\"app-header\"> \n            <h1> Welcome to Meow Chat Room </h1>\n        </div>\n        <img className=\"app-img\" src={catImage} alt=\"Image of a cat\"/>\n        {/** NAVIGATE TO LOGIN PAGE */}\n        {/** pass in auth state to be changed when user authenticates*/}\n        <Auth setIsAuth = {setIsAuth}/>\n      </div>\n    );\n  } \n\n  //if user is authenticated...\n  //if room exist --> go to the chat room \n  //if room does NOT exist --> create chat room with user inputs\n  \n  return (\n  <> \n    {\n    //check room and set to a room\n    room ? \n      // ROOM EXIST! --> open Chat component\n    (<div> <Chat room={room} userChatName={userChatName}/> </div>) : \n\n    //  ROOM DOES NOT EXIST\n    (\n    <div className=\"room\"> \n    <label> Enter Your Chat Name: </label>\n    <input ref={chatNameRef}/>\n    {/* <button onClick={() => setUserChatName(chatNameRef.current.value)}> create chat name </button> */}\n\n    <label> Enter Room Name: </label>\n      {/** grabs the input and stores it inside roomInputRef*/}\n    <input ref={roomInputRef}/>\n\n      {/** room state will be set to the value of roomInputRef AKA chat name set by users */}\n    <button onClick={() => setRoomAndName(roomInputRef.current.value, chatNameRef.current.value)}> Enter Chat</button>\n    </div>\n    \n    )}\n  \n  `<div className=\"sign-out\">\n      <button onClick={signUserOut}> Sign Out </button>\n  </div>\n  </>\n  \n  );\n\n \n  \n}\n\nexport default App;\n","/Users/angelyang/Desktop/realchatapp/src/firebase-config.js",[],[],"/Users/angelyang/Desktop/realchatapp/src/components/Auth.js",["31","32"],[],"import '/Users/angelyang/Desktop/realchatapp/src/App.css';\n\n//import firebase config variables created in firebase-config file\nimport {auth, provider} from \"../firebase-config.js\"\n\n//import relevant built-in function from firebase\nimport {signInWithPopup, createUserWithEmailAndPassword} from \"firebase/auth\"\nimport { useRef } from \"react\";\n\n//import Cookies from the universal cookie library\nimport Cookies from 'universal-cookie'\n\n\n//create a reference for your cookie\n//can get(), set(), remove() cookies in the browser\nconst cookies = new Cookies();\n\n\nexport const Auth = (authState) => {\n    \n    const { setisAuth } = authState; \n\n\n\n    //function that returns a promise to allow users to sign in with a pop-up\n    //provided 2 arguments: (1) the authentication info (2) the provider from firebase-config.js\n    const signInWithGoogle = async () => {\n        \n        try {\n             //will return an object with email, displayname, profile pic\n            const result = await signInWithPopup(auth, provider);\n\n            //set up cookies upon sign-in\n            //we want the refresh token to be stored in our cookie under the name \"auth-token\"\n            cookies.set(\"auth-token\", result.user.refreshToken);\n\n            //set authentication to true\n            setisAuth(true);\n\n\n        } catch (err) {\n            console.log(err);\n        }\n    }\n    \n    return (\n        <div className=\"auth\">\n            <p> </p>\n            <button className=\"app-roundedButton\" onClick={signInWithGoogle}> Sign in With Google </button>\n        </div>\n    );\n}","/Users/angelyang/Desktop/realchatapp/src/components/chat.js",["33","34"],[],"import {useEffect, useState} from \"react\"\n//firestore imports\nimport {addDoc, collection, serverTimestamp, onSnapshot, query, where, orderBy} from 'firebase/firestore'\nimport { auth, database } from \"../firebase-config\";\n\n//import style\nimport \"../styles/chat.css\"\n\nexport const Chat = (props) => {\n\n    //stores the room the user created in App.js\n    const room = props.room;\n\n    const name = props.userChatName;\n\n    //make a reference to the collection we want to add docs to\n    const messagesColl = collection(database, \"messages\");\n\n    //state to keep track of what the user is typing in the input\n    const [message, setMessage] = useState(\"\");\n\n    //state to display ALL messages inside a room as an ARRAY\n    const [allMessages, setAllMessages] = useState([]);\n\n    //allows us to fetch all the data and display it in the chatroom\n    useEffect(() => {\n        //query allows you to filter out the data in your collection \n        //where allows you to identify docs that meet your criteria\n        //we only want to fetch data/messages from the SAME ROOM \n        //messages are ordered in ascending order\n        const messagesQuery = query(messagesColl, \n            where(\"room\", \"==\", room), orderBy(\"createdAt\"));\n\n        //allows us to listen for changes to the collection\n        const unsubscribe = onSnapshot(messagesQuery, (snapshot) => {\n        //declare empty array\n        let updatedMessages = [];\n\n        //grab every element in the snapshot  + add each doc\n        //as an object to the array \"updatedMessages\" \n        snapshot.forEach((doc) => {\n            //add all of the data from doc & create a new field called \n            //\"id\" and store the doc.id as its value\n            updatedMessages.push({...doc.data(), id : doc.id});\n            });\n        \n        //update the message stream \n        setAllMessages(updatedMessages);\n        });\n\n        //clean up our useEffect\n        return () => unsubscribe();\n\n    }, []);\n\n    //submit form event handler\n    const handleSubmit = async (e) => {\n        //prevents the page from reloading\n        e.preventDefault()\n\n        //test message in the console\n        console.log(message);\n\n        //if the message is empty, return nothing (DON'T ADD TO DATABASE)\n        if (message === \"\") {\n            return;\n        }\n\n        //add doc/message to your collection with 2 arguments:\n        //(1) reference to your collection\n        //(2) the object to add as your doc {attr1: something, attr2: something...}\n        await addDoc(messagesColl, {\n            text: message,\n            //serverTimestamp returns the time the message was sent\n            createdAt: serverTimestamp(),\n            name: name + \" meow\",\n            room: room,\n        });\n\n        //clear message after adding new doc\n        setMessage(\"\");\n\n    }\n\n    return (\n\n        <div className=\"chat-app\"> \n\n        <div className=\"header\"> \n        <h1> Welcome to: {room} </h1>\n        </div>\n\n        <div className=\"messages\"> \n        \n        {allMessages.map((m) => \n            <div className=\"message\" key={m.id}> \n                <span className=\"user\"> {m.name} </span>\n                {m.text}\n            </div> \n\n        )} </div>\n        \n        <form onSubmit={handleSubmit} className=\"new-message-form\">\n\n            {/** onChange will continue to update the \"message\" state with the input text */}\n            {/** set value to message so that when message cleared so does the input */}\n            <input className=\"new-message-input\" placeholder=\"type something...\" onChange={(e) => setMessage(e.target.value)} value={message}/>\n\n            {/** button must be of type \"submit\" for it to submit the form */}\n            <button type=\"submit\" className=\"send-button\"> Send </button>\n    \n        </form>\n       \n        </div>\n    )\n}\n",{"ruleId":"35","severity":1,"message":"36","line":59,"column":9,"nodeType":"37","endLine":59,"endColumn":71},{"ruleId":"38","severity":1,"message":"39","line":7,"column":26,"nodeType":"40","messageId":"41","endLine":7,"endColumn":56},{"ruleId":"38","severity":1,"message":"42","line":8,"column":10,"nodeType":"40","messageId":"41","endLine":8,"endColumn":16},{"ruleId":"38","severity":1,"message":"43","line":4,"column":10,"nodeType":"40","messageId":"41","endLine":4,"endColumn":14},{"ruleId":"44","severity":1,"message":"45","line":54,"column":8,"nodeType":"46","endLine":54,"endColumn":10,"suggestions":"47"},"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","no-unused-vars","'createUserWithEmailAndPassword' is defined but never used.","Identifier","unusedVar","'useRef' is defined but never used.","'auth' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'messagesColl' and 'room'. Either include them or remove the dependency array.","ArrayExpression",["48"],{"desc":"49","fix":"50"},"Update the dependencies array to be: [messagesColl, room]",{"range":"51","text":"52"},[1963,1965],"[messagesColl, room]"]